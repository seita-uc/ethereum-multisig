const MultiSig2of2 = artifacts.require('MultiSig2of2'); 
const WalletFactory = artifacts.require('MultiSig2of2'); 
//const util = require('ethereumjs-util');
//const abi = require('ethereumjs-abi');

module.exports = async (callback) => {
    try {
        const accounts = await web3.eth.getAccounts();
        const wallet = await WalletSimple.deployed();
        
        let signers = new Array();
        for (let i = 0; i < 3; i++) {
            const privkey = accountsHelper.accounts[i].privkey.toString("hex");
            const signer = web3.eth.accounts.privateKeyToAccount("0x" + privkey);
            signers.push(signer);
        }

        await wallet.send(web3.utils.toWei('10', 'ether'))
        const sequenceIdString = await wallet.getNextSequenceId.call();
        const sequenceId = parseInt(sequenceIdString);
        //const destinationAccount = accounts[5];
        const destinationAccount = "0x78B019cC9AeA6086e7f5271a708F3458C9d6b39b";
        const amount = 1;
        const expireTime = Math.floor((new Date().getTime()) / 1000) + 60; // 60 seconds
        //const expireTime = 1561513333;
        const data = web3.utils.fromAscii('abcde35f123'); //sendMultiSig
        //const data = web3.eth.abi.encodeFunctionSignature("sendMultiSig(address,uint,bytes,uint,uint,bytes)");
        const operationHash = getSha3ForConfirmationTx(
            destinationAccount,
            amount,
            data,
            expireTime,
            sequenceId
        );
        const sig = util.ecsign(operationHash, accountsHelper.privateKeyForAccount(accounts[0]));
        const serializedSig = helpers.serializeSignature(sig);

        //check if sig is properly made
        //const pubkey = util.ecrecover(operationHash, sig.v, sig.r, sig.s);
        //console.log(util.pubToAddress(pubkey).toString("hex"));

        console.log("signer1: " + accounts[0]);
        console.log("signer2: " + accounts[1]);
        console.log("signer3: " + accounts[2]);
        console.log("sequenceId: " + sequenceId);
        console.log("destinationAccount: " + destinationAccount);
        console.log("amount: " + amount);
        console.log("expireTime: " + expireTime);
        console.log("data: " + data);
        console.log("operationHash: " + operationHash.toString("hex"));
        console.log("sig: " + JSON.stringify(sig));
        console.log("serializedSignatures: " + serializedSig);

        const receipt = await wallet.sendMultiSig(
            destinationAccount,
            web3.utils.toWei(`${amount}`, 'ether'),
            data,
            expireTime,
            sequenceId,
            serializedSig,
            { from: accounts[1] }
        );
        console.log(receipt.logs);
    } catch(err) {
        console.error(err);
    }
    return callback();
}
